@using InplayBet.Web.Models
@using InplayBet.Web.Models.Base
@using InplayBet.Web.Utilities
@model List<ChallengeModel>
@{Layout = null;}
@functions {
    public static string SetChallengeColor(ChallengeModel challenge)
    {
        string challangeStatus = challenge.ChallengeStatus.AsString();
        if (string.IsNullOrEmpty(challangeStatus))
            return "yellow-box";
        else if (challangeStatus == StatusCode.Lost.ToString())
            return "red-box";
        else if (challangeStatus == StatusCode.Won.ToString())
            return "green-box";
        else
            return string.Empty;
    }
}
@helper PopulateChallenge(ChallengeModel challenge, bool showPromo, bool showInplay)
{
    <div class='@((challenge == null || challenge.ChallengeId == 0) ? "yellow-box" : SetChallengeColor(challenge))'>
        <div class="blk-bg">
            <h3 class="blk-heading">Challenge @((challenge == null) ? "1" : challenge.ChallengeNumber.AsString()) @(showInplay ? "- Inplay" : "")</h3>
            <a href="#" class="report-btn">report</a>
        </div>
        <div class="scroll">
            <div class="outer">
                @Html.Partial("GetBetsByChallenge", ((challenge == null || challenge.ChallengeId == 0) ? (new List<BetModel>()) : challenge.Bets),
                    new ViewDataDictionary(this.ViewData) { { "CurrentChallenge", challenge } })
            </div>
        </div>
    </div>
    if (showPromo)
    {
        <div class="promo-bnr">
            <img src='@Url.Content("~/Styles/images/bet-promo-bnr.jpg")' alt="">
        </div>
    }
}

@foreach (ChallengeModel challenge in Model)
{
    @PopulateChallenge(challenge, false, (Model.IndexOf(challenge) == 0))
    if (Model.IndexOf(challenge) == 1)
    {
        <div class="promo-bnr">
            <img src='@Url.Content("~/Styles/images/bet-promo-bnr.jpg")' alt="">
        </div>
    }
}
@if (Model.IsEmptyCollection())
{
    @PopulateChallenge(null, true, true);
}